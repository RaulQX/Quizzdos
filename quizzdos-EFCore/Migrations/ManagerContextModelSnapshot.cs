// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gps_manager.EFCore;

#nullable disable

namespace quizzdos_EFCore.Migrations
{
    [DbContext(typeof(ManagerContext))]
    partial class ManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("quizzdos_EFCore.Entities.Books.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerTypeId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.AnswerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerTypes");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("PersonId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Mark")
                        .HasColumnType("float");

                    b.Property<Guid>("QuizzId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("QuizzId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.Quizz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.Property<Guid?>("ImageId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PassingGrade")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ImageId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.Tip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizzId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuizzId");

                    b.ToTable("Tips");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Images.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NotificationText")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Users.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Books.Book", b =>
                {
                    b.HasOne("quizzdos_EFCore.Entities.Courses.Course", "Course")
                        .WithMany("Books")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.Answer", b =>
                {
                    b.HasOne("quizzdos_EFCore.Entities.Courses.AnswerType", "AnswerType")
                        .WithMany("Answers")
                        .HasForeignKey("AnswerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerType");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.AnswerType", b =>
                {
                    b.HasOne("quizzdos_EFCore.Entities.Courses.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.Course", b =>
                {
                    b.HasOne("quizzdos_EFCore.Entities.Images.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quizzdos_EFCore.Entities.Users.Person", "Person")
                        .WithMany("Courses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.Question", b =>
                {
                    b.HasOne("quizzdos_EFCore.Entities.Images.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("quizzdos_EFCore.Entities.Courses.Quizz", "Quizz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Quizz");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.Quizz", b =>
                {
                    b.HasOne("quizzdos_EFCore.Entities.Courses.Course", "Course")
                        .WithMany("Quizzes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quizzdos_EFCore.Entities.Images.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.Tip", b =>
                {
                    b.HasOne("quizzdos_EFCore.Entities.Courses.Quizz", "Quizz")
                        .WithMany("Tips")
                        .HasForeignKey("QuizzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quizz");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("quizzdos_EFCore.Entities.Users.Person", "Person")
                        .WithMany("Notifications")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Users.Person", b =>
                {
                    b.HasOne("quizzdos_EFCore.Entities.Users.Person", null)
                        .WithMany("Quizzmates")
                        .HasForeignKey("PersonId");

                    b.HasOne("quizzdos_EFCore.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.AnswerType", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.Course", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Courses.Quizz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Tips");
                });

            modelBuilder.Entity("quizzdos_EFCore.Entities.Users.Person", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Notifications");

                    b.Navigation("Quizzmates");
                });
#pragma warning restore 612, 618
        }
    }
}
